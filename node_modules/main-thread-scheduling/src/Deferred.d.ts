/**
 * Creates a Promise with additional `reject` and `resolve` methods.
 * It also adds a `state` property.
 *
 * @example
 * ```typescript
 * const deferred = new Deferred<number>();
 * // ...
 * deferred.resolve(42);
 * ```
 */
export default class Deferred<T = void> extends Promise<T> {
    #private;
    constructor(executor?: (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: unknown) => void) => void);
    get state(): 'pending' | 'fulfilled' | 'rejected';
    resolve(value: T): void;
    resolve(value: PromiseLike<T>): Promise<void>;
    reject(reason?: unknown): void;
}
