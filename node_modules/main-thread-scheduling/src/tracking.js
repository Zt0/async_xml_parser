import state from './state';
import Deferred from './Deferred';
let isTracking = false;
let idleCallbackId;
export function startTracking() {
    // istanbul ignore next
    if (isTracking) {
        return;
    }
    isTracking = true;
    const reset = () => {
        state.idleDeadline = undefined;
        state.frameTimeElapsed = false;
        state.frameWorkStartTime = undefined;
    };
    const loop = () => {
        if (typeof requestIdleCallback !== 'undefined') {
            idleCallbackId = requestIdleCallback((deadline) => {
                reset();
                state.idleDeadline = deadline;
                state.onIdleCallback.resolve();
                state.onIdleCallback = new Deferred();
            });
        }
        requestAnimationFrame(() => {
            reset();
            state.onAnimationFrame.resolve();
            state.onAnimationFrame = new Deferred();
            if (state.tasks.length === 0) {
                isTracking = false;
                if (typeof cancelIdleCallback !== 'undefined') {
                    cancelIdleCallback(idleCallbackId);
                }
            }
            else {
                loop();
            }
        });
    };
    loop();
}
