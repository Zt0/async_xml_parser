// inspired by Deno's implementation: https://deno.land/std@0.170.0/async/deferred.ts?source
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Deferred_resolve, _Deferred_reject, _Deferred_state;
/**
 * Creates a Promise with additional `reject` and `resolve` methods.
 * It also adds a `state` property.
 *
 * @example
 * ```typescript
 * const deferred = new Deferred<number>();
 * // ...
 * deferred.resolve(42);
 * ```
 */
export default class Deferred extends Promise {
    constructor(executor) {
        let resolve;
        let reject;
        super((resolveLocal, rejectLocal) => {
            executor === null || executor === void 0 ? void 0 : executor(resolveLocal, rejectLocal);
            resolve = resolveLocal;
            reject = rejectLocal;
        });
        _Deferred_resolve.set(this, void 0);
        _Deferred_reject.set(this, void 0);
        _Deferred_state.set(this, void 0);
        __classPrivateFieldSet(this, _Deferred_state, 'pending', "f");
        __classPrivateFieldSet(this, _Deferred_resolve, resolve, "f");
        __classPrivateFieldSet(this, _Deferred_reject, reject, "f");
    }
    get state() {
        return __classPrivateFieldGet(this, _Deferred_state, "f");
    }
    resolve(value) {
        if (value instanceof Promise) {
            // eslint-disable-next-line promise/prefer-await-to-then
            return value.then(() => {
                __classPrivateFieldSet(this, _Deferred_state, 'fulfilled', "f");
                __classPrivateFieldGet(this, _Deferred_resolve, "f").call(this, value);
            });
        }
        __classPrivateFieldSet(this, _Deferred_state, 'fulfilled', "f");
        __classPrivateFieldGet(this, _Deferred_resolve, "f").call(this, value);
    }
    reject(reason) {
        __classPrivateFieldSet(this, _Deferred_state, 'rejected', "f");
        __classPrivateFieldGet(this, _Deferred_reject, "f").call(this, reason);
    }
}
_Deferred_resolve = new WeakMap(), _Deferred_reject = new WeakMap(), _Deferred_state = new WeakMap();
