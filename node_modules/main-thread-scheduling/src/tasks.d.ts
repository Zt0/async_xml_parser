import Deferred from './Deferred';
export declare type Task = {
    priority: 'background' | 'user-visible';
    deferred: Deferred;
};
/**
 * Adds a task to the queue and returns the new task.
 * @param priority {('background' | 'user-visible')} The priority of the new task.
 */
export declare function createTask(priority: 'background' | 'user-visible'): Task;
/**
 * Remove the task from the queue. This happens when we execute this task and it's time for the next
 * one. Call `nextDeferred()` in order to start executing the next task.
 * @param task {Task}
 */
export declare function removeTask(task: Task): void;
/**
 * Resolve the last task in the queue. This triggers executing the task by resolving the promise
 * inside `yieldControl()` function.
 */
export declare function nextTask(): void;
